// io::stdin().read_line(&mut guess).expect("failed to read line");

The & indicates that this argument is a reference, which gives you a way to let multiple parts 
of your code access one piece of data without needing to copy that data into memory multiple times.
References are a complex feature, and one of Rust’s major advantages is how safe and easy it is to use references. 


let guess:u32 = match guess.trim().parse()
    {
        Ok(num) => num,
        Err(_) => continue
    };

Result’s variants are Ok or Err. The Ok variant indicates the operation was successful, 
and inside Ok is the successfully generated value. The Err variant means the operation failed, 
and Err contains information about how or why the operation failed.
